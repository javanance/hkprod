package com.gof.entity;
// Generated 2020. 1. 16 ���� 3:15:14 by Hibernate Tools 5.1.0.Beta1

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.Table;

import com.gof.enums.EBoolean;
import com.gof.enums.ECoa;
import com.gof.enums.ERollFwdType;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * MstRollFwd generated by hbm2java
 */
@Entity
@Table(name = "MST_ROLL_FWD")
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MstRollFwd implements java.io.Serializable {
	private static final long serialVersionUID = -8151467682976876533L;

	@Enumerated(EnumType.STRING)
	@Id private ERollFwdType rollFwdType;
	private String rollFwdNm;
	
//	private Integer rollFwdSeq;
	
//	@Enumerated(EnumType.STRING)
//	private EBoolean closeStepYn;
	
//	@Enumerated(EnumType.STRING)
//	private ELossStep lossStep;
	
	@Enumerated(EnumType.STRING)
	private EBoolean epvAplyYn;

//	@Enumerated(EnumType.STRING)
//	private EBoolean lossAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean faceAplyYn;
//	@Enumerated(EnumType.STRING)
//	private EBoolean lossFaceAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean tvomAplyYn;

	
//	@Enumerated(EnumType.STRING)
//	private EBoolean lossTvomAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean raAplyYn;
	
//	@Enumerated(EnumType.STRING)
//	private EBoolean lossRaAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean tvogAplyYn;

	@Enumerated(EnumType.STRING)
	private EBoolean elAplyYn;

//	@Enumerated(EnumType.STRING)
//	private EBoolean calcCsmAplyYn;

	@Enumerated(EnumType.STRING)
	private EBoolean csmAplyYn;

	@Enumerated(EnumType.STRING)
	private EBoolean lossRcvAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean aociAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean cashAplyYn;

	@Enumerated(EnumType.STRING)
	private EBoolean fcostAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean irevAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean icostAplyYn;
	
//	@Enumerated(EnumType.STRING)
//	private EBoolean frevAplyYn;
	
	@Enumerated(EnumType.STRING)
	private EBoolean dacAplyYn;
	
	private String serviceTiming;
	private String useYn;
	private String lastModifiedBy;
	private LocalDateTime lastModifiedDate;
	
	
	public int getRollFwdSeq() {
		return rollFwdType.getOrder();
	}
	
	public boolean isCloseStep() {
		return rollFwdType.isClose();
	}
	
	public Map<ECoa, Boolean> getCoaMap(){
		Map<ECoa, Boolean> rstMap = new HashMap<ECoa, Boolean>();
		rstMap.put(ECoa.EPV, 		epvAplyYn.isTrueFalse());
//		rstMap.put(ECoa.LOSS, 		lossAplyYn.isTrueFalse());
		rstMap.put(ECoa.FACE_AMT, 	faceAplyYn.isTrueFalse());
		rstMap.put(ECoa.FACE_LIC, 	faceAplyYn.isTrueFalse());
//		rstMap.put(ECoa.LOSS_FACE, 	lossFaceAplyYn.isTrueFalse());
		rstMap.put(ECoa.TVOM, 		tvomAplyYn.isTrueFalse());
		rstMap.put(ECoa.TVOM_LIC, 		tvomAplyYn.isTrueFalse());
//		rstMap.put(ECoa.LOSS_TVOM, 	lossTvomAplyYn.isTrueFalse());
		rstMap.put(ECoa.RA, 		raAplyYn.isTrueFalse());
		rstMap.put(ECoa.RA_LIC, 		raAplyYn.isTrueFalse());
//		rstMap.put(ECoa.LOSS_RA,	lossRaAplyYn.isTrueFalse());		
		rstMap.put(ECoa.TVOG, 		tvogAplyYn.isTrueFalse());
		rstMap.put(ECoa.EL, 		elAplyYn.isTrueFalse());
		rstMap.put(ECoa.EL_LIC, 		elAplyYn.isTrueFalse());
//		rstMap.put(ECoa.EL_AMT, 	elAplyYn.isTrueFalse());
//		rstMap.put(ECoa.CALC_CSM,	calcCsmAplyYn.isTrueFalse());
		rstMap.put(ECoa.CSM, 		csmAplyYn.isTrueFalse());
		rstMap.put(ECoa.LOSS_RCV, 	lossRcvAplyYn.isTrueFalse());
		rstMap.put(ECoa.AOCI, 		aociAplyYn.isTrueFalse());
		rstMap.put(ECoa.AOCI_LIC,	aociAplyYn.isTrueFalse());
		rstMap.put(ECoa.CASH, 		cashAplyYn.isTrueFalse());
		rstMap.put(ECoa.FCOST, 		fcostAplyYn.isTrueFalse());
		rstMap.put(ECoa.ICOST, 		icostAplyYn.isTrueFalse());
		rstMap.put(ECoa.FREV, 		fcostAplyYn.isTrueFalse());
		rstMap.put(ECoa.IREV, 		irevAplyYn.isTrueFalse());
		rstMap.put(ECoa.DAC, 		dacAplyYn.isTrueFalse());
		return rstMap;
	}
	@Override
	public boolean equals(Object other) {
		if( other instanceof MstRollFwd) {
			return rollFwdType.equals(((MstRollFwd)other).getRollFwdType());
		}
		else {
			return false;
		}
	}
	@Override
	public int hashCode() {
		return super.hashCode();
	}
	
}
