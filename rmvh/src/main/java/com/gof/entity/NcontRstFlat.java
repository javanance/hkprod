package com.gof.entity;
// Generated 2020. 1. 16 ���� 3:15:14 by Hibernate Tools 5.1.0.Beta1

import java.time.LocalDateTime;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

import com.gof.enums.EProfitDiv;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * NewcontRstFlat generated by hbm2java
 */
@Entity
@IdClass(NcontRstFlatId.class)
@Table(name = "NCONT_RST_FLAT")
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder

public class NcontRstFlat implements java.io.Serializable {
	private static final long serialVersionUID = -8151467682976876533L;

	@Id	private String baseYymm;
	@Id	private String ctrPolno;
	
	@Id private String prodCd;
	
	private Double outCfAmt;
	private Double inCfAmt;
	private Double cfAmt;
	
	private Double outEpvAmt;
	private Double inEpvAmt;
	private Double epvAmt;
	
	private Double tvom;
	private Double tvogAmt;
	
	private Double raAmt;
	private Double csmAmt;
	private Double lossAmt;
	private Double fvAmt;

	
	private String lastModifiedBy;
	private LocalDateTime lastModifiedDate;

	@Override
	public boolean equals(Object arg0) {
		return super.equals(arg0);
	}
	@Override
	public int hashCode() {
		return super.hashCode();
	}
	
	public EProfitDiv getProfitDiv() {
		EProfitDiv profitDiv = EProfitDiv.ETC;
		
		double profitRatio = csmAmt / outEpvAmt;
		
		for(EProfitDiv ee : EProfitDiv.values()) {
			if( ee.getPredicate().test(profitRatio)) {
				profitDiv = ee; 
				break;
			}
		}
		return profitDiv;
	}
	
//	public MstContGoc createMstContGoc(MstProdGoc prodGoc) {
////		String cohort  = initYymm.substring(4,6) +"Q"+  Integer.valueOf(initYymm.substring(4,6))/3;
////		String cohort  = DateUtil.convertFrom(initYymm).format(DateTimeFormatter.ofPattern("YYYYQQQ", Locale.US));
//		
//		//Temp!!!!
////		if(initYymm.compareTo("201601") < 1) {
////			cohort =DateUtil.convertFrom("201501").format(DateTimeFormatter.ofPattern("YYYYQQQ", Locale.US));
////		}
////		else if(initYymm.compareTo("201701") < 1) {
////			cohort =DateUtil.convertFrom("201601").format(DateTimeFormatter.ofPattern("YYYYQQQ", Locale.US));
////		}
////		else if(initYymm.compareTo("201801") < 1) {
////			cohort =DateUtil.convertFrom("201701").format(DateTimeFormatter.ofPattern("YYYYQQQ", Locale.US));
////		}
//		
////		TODO: cohort 단위 결정..
//		String cohort = true? ECohortQurt.getECohrtQurt(baseYymm): ECohortYear.getECohortYear(baseYymm);
////		String cohortYear = ECohortYear.getECohortYear(initYymm);
//		
//		double profitRatio = csmAmt/ outCfAmt;
//		String profitCode ="ETC";
//		
//		for(EProfitDiv ee : EProfitDiv.values()) {
//			if( ee.getPredicate().test(profitRatio)) {
//				profitCode = ee.name(); 
//			}
//		}
//
//		String gocId ="MST_NA";
//		List<MstGoc> gocList = MstDao.getMstGoc();
//		for(MstGoc aa : gocList) {
//			if(profitCode.equals(aa.getProfitCd()) 
//					&& cohort.equals(aa.getCohort()) 
//						&&  prodGoc.getCsmGroupCd().equals(aa.getCsmGroupCd())) {
//				gocId = aa.getGocId();
//				break;
//			}
//		}
//		
//		return MstContGoc.builder()
//						.ctrPolno(ctrPolno)
//						.mdTpcd("NA")						//TODO ::COLUMN DELETE!!!!
//						.ctrDt(baseYymm)
//						.initYymm(baseYymm)
//						.cohort(cohort)
//						.portCd(prodGoc.getPortCd())
//						.csmGroupCd(prodGoc.getCsmGroupCd())
//						.raGroupId(prodGoc.getRaGroupId())
//						.profitCd(profitCode)
//						.gocId(gocId)
//						.lastModifiedBy("GMV")
//						.lastModifiedDate(LocalDateTime.now())
//						.build()
//						;
//	}
}
