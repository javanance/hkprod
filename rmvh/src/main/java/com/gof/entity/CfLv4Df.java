package com.gof.entity;
// Generated 2020. 1. 16 ���� 3:15:14 by Hibernate Tools 5.1.0.Beta1

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.gof.enums.EBoolean;
import com.gof.enums.EBoxModel;
import com.gof.enums.ECfType;
import com.gof.enums.EContStatus;
import com.gof.enums.ELiabType;
import com.gof.enums.ETiming;
import com.gof.infra.GmvConstant;
import com.gof.interfaces.Compoundable;
import com.gof.util.DateUtil;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * CfLv2Goc generated by hbm2java
 */
@Entity
@Table(name = "CF_LV4_DF")
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
//@Slf4j
public class CfLv4Df implements java.io.Serializable , Compoundable{
	private static final long serialVersionUID = -8151467682976876533L;
	
	@Id
	@SequenceGenerator(name = "CF_LV4_SEQ", sequenceName = "CF_LV4_SEQ", initialValue = 1, allocationSize = 50)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "CF_LV4_SEQ" )
	private Long seqId;
	
	private String baseYymm;
	private String gocId;
	
	@Enumerated(EnumType.STRING)
	private ELiabType liabType;
	
	
	@Enumerated(EnumType.STRING)
	@Id private EContStatus stStatus;
	
	@Enumerated(EnumType.STRING)
	@Id private EContStatus endStatus;
	
	@Enumerated(EnumType.STRING)
	private EBoolean newContYn;
	
	private String subKey;
	private String runsetId;
	private String deltaGroup;
	private String cfKeyId;
	
	@Enumerated(EnumType.STRING)
	private ECfType cfType;
	
	@Enumerated(EnumType.STRING)
	private ETiming cfTiming;
	
	@Enumerated(EnumType.STRING)
	private EBoolean outflowYn;
	
	private Double cfMonthNum;
	
	private Integer setlAftPassMmcnt;				//Change for update 61st cf !!!!
	
	private Double cfAmt;
	private Double prevCfAmt;
	private Double deltaCfAmt;
	private Double epvAmt;
	
	private Integer slidingNum;
	
	
	@Enumerated(EnumType.STRING)
	private EBoolean eirYn;
	private String initCurveYymm;
	private String prevCurveYymm;
	private double initRate;
	private double prevRate;
	private double prevSysRate;

	private double currRate;
	private double currSysRate;
	
	private String lastModifiedBy;
	private LocalDateTime lastModifiedDate;
	
	@Transient
	private Map<EBoxModel, Double> boxValueMap = new HashMap<EBoxModel, Double>();
	
	public Double getAppiedCfAmt() {
//		return cfAmt;
		return deltaCfAmt;
	}
	
	@Override
	public boolean equals(Object arg0) {
		return super.equals(arg0);
	}
	@Override
	public int hashCode() {
		return super.hashCode();
	}
	@Override
	public String toString() {
		 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(runsetId).append(",")
	 	 	.append(deltaGroup).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
	 	 	.append(newContYn).append(",")
	 	 	.append(cfKeyId).append(",")
	 	 	.append(cfTiming).append(",")
	 	 	.append(cfMonthNum).append(",")
	 	 	.append(setlAftPassMmcnt).append(",")
	 	 	.append(cfAmt).append(",")
	 	 	.append(epvAmt).append(",")
	 	 	.append(prevCfAmt).append(",")
	 	 	.append(deltaCfAmt).append(",")
	 	 	.toString();
	}
	
	
	
//	*************************************************
	
	public String getPkForEir() {
		 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
//	 	 	.append(newContYn).append(",")
	 	 	.toString(); 
	}
	
	public String getPkForRst() {
		 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
	 	 	.append(newContYn).append(",")
	 	 	.toString(); 
	}
	
	public String getDeltaCashFlowPk(){ 
	 	 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
//	 	 	.append(newContYn).append(",")
	 	 	.append(cfKeyId).append(",")
	 	 	.append(cfTiming).append(",")
	 	 	.append(cfMonthNum).append(",")
	 	 	.append(outflowYn).append(",")
	 	 	.toString(); 
	}
	
//	*************************************************
	
	public CfLv4Df updateEir(Map<ELiabType, Double> eirMap) {
		this.currSysRate = eirMap.getOrDefault(ELiabType.ALL, 0.0);
		this.lastModifiedBy= GmvConstant.getLastModifier()+"#UPDATE";; 
		return this;
	}
	public CfLv4Df updateLrcEir(Map<ELiabType, Double> eirMap) {
		this.currSysRate = eirMap.getOrDefault(ELiabType.LRC, 0.0);
		this.lastModifiedBy= GmvConstant.getLastModifier()+"#UPDATE";; 
		return this;
	}
	
	public CfLv4Df updateEirByLiabType(Map<ELiabType, Double> eirMap) {
		this.currSysRate = eirMap.getOrDefault(liabType, 0.0);
		this.lastModifiedBy= GmvConstant.getLastModifier() +"#UPDATE"; 
		return this;
	}
	
	public boolean check(MapRunsetCalc mapCalc) {
//		log.info("calc : {},{}", calc.getCalcId(), calc.getCfTypeList());
//		log.info("calc1 : {},{}", cfType);
		MstCalc calc = mapCalc.getMstCalc();
		return liabType.equals(calc.getLiabType())
//					&& calc.getCfTypeList().contains(cfType)
					&& calc.getCfGroup().contatins((cfType))
//						&& calc.getServiceTiming().isApplied(this)
//						&& boxId.equals(calc.getBoxId())
							&& runsetId.equals(mapCalc.getRunsetId())
							;
	}
	
	
	//TODO :....
	public Map<EBoxModel, Double> getBoxValueMap(Function<CfLv4Df, Double> tenorAdjFn) {
		return getBoxValueMap();
	}
	
//	EBoxModel.C0, ....
	public double getBoxValue(EBoxModel box) {
//		log.info("box DF : {},{},{},{},{},{},{}", gocId, cfMonthNum, getPrevTimeFactor(), getPrevRate(), getPrevSysRate(), getCfAmt(), getBoxMap());
		return getAppiedCfAmt() * getBoxValueMap().getOrDefault(box, 0.0);
	}
	
//	public String getBoxRateString(EBoxModel box) {
//		return  getBoxValueMap().getOrDefault(box,"");
//	}
	
//	private double getEpv(double intRate, double timeFactor) {
//		double df = ECompound.Annualy.getDf(intRate, timeFactor);
////		log.info("Rate {} : {},{},{},{},{}", getPkForEir(), intRate, df, cfAmt, cfMonthNum, cfAmt*df);
//		return cfAmt * df;
//	}
	
	@Override
	public Map<EBoxModel, Double> getBoxValueMap() {
//		return EBoxModel.getBoxValueMap(this, "AddOn");
		if(boxValueMap.isEmpty()) {
			boxValueMap = EBoxModel.getBoxValueMap(this, "AddOn");
		}
		if(!isFutureCf(0.0) && !boxValueMap.containsKey(EBoxModel.ZU)) {
			boxValueMap.put(EBoxModel.ZU, -1.0);
//			log.info("in ZU : {}, {}, {}, {},{}", getAppiedCfAmt(), getPkForEir() , getCfType(), getCfMonthNum(), boxValueMap.get(sEBoxModel.ZU));
		}
		return boxValueMap;
	}

	public Map<EBoxModel, Double> getBoxValueMap(DfLv3Flat irRate) {
		return getBoxValueMap();
	}
	
	public boolean isFutureCf() {
		return isFutureCf(0.0);
	}
	public boolean isFutureCf(double forwardingNum) {
		if(cfTiming.equals(ETiming.START)) {
			return cfMonthNum >= forwardingNum;
		}
		else {
			return cfMonthNum > forwardingNum;
		}
//		return cfTiming.equals(ETiming.START)? cfMonthNum >= forwardingNum: cfMonthNum > forwardingNum; 
	}
	
	public double getGenCfMonthNumForEir() {
		return cfMonthNum + slidingNum; 
	}

	public double getGenCfMonthNum() {
		return cfMonthNum + slidingNum; 
	}
	
	public String getGenYymm() {
		return DateUtil.addMonthToString(baseYymm, -1 * slidingNum);
	}
	
	@Override
	public double getCurrTimeFactor() {
		if(cfMonthNum < 0.0 ) {
			return 0.0;
		}
		return cfMonthNum/12.0;
	}
	@Override
	public double getPrevTimeFactor() {
//		int addedMonNum = DateUtil.monthBetween(prevYymm, baseYymm) ;
		int addedMonNum = slidingNum;
		if(cfMonthNum + addedMonNum <0.0) {
			return 0.0;
		}
		return ( cfMonthNum + addedMonNum) /12.0;  
	}
	
	@Override
	public double getFirstNewContTimeFactor() {
//		int addedMonNum = DateUtil.monthBetween(prevYymm, baseYymm) ;
		int addedMonNum = slidingNum;
		if(cfMonthNum + addedMonNum < 0.0) {
			return 0.0;
		}
		return ( cfMonthNum + addedMonNum) /12.0;  
	}
	@Override     
	public double getSecondNewContTimeFactor() {
//		int addedMonNum = DateUtil.monthBetween(prevYymm, baseYymm) -1;
		int addedMonNum = slidingNum;
		if(cfMonthNum + addedMonNum <0.0) {
			return 0.0;
		}
		return ( cfMonthNum + addedMonNum) /12.0;  
	}
	@Override
	public double getThirdNewContTimeFactor() {
		          
//		int addedMonNum = DateUtil.monthBetween(prevYymm, baseYymm) -2;
		int addedMonNum = slidingNum;
//		log.info("third New timeFactor : {},{},{},{}", addedMonNum, cfMonthNum, cfMonthNum+ addedMonNum, thirdNewContRate);
		
		if(cfMonthNum + addedMonNum <0.0) {
			return 0.0;
		}
		return ( cfMonthNum + addedMonNum) /12.0;  
	}
	@Override
	public double getFirstNewContRate() {
		return 0.0;
	}
	@Override
	public double getSecondNewContRate() {
		return 0.0;
	}
	@Override
	public double getThirdNewContRate() {
		return 0.0;
	}
	
	public double getAoci(double eir) {
//		return getAppiedCfAmt() *( getBoxValueMap().get(EBoxModel.C0) -  1/ Math.pow(1+eir, getCurrTimeFactor()));
		return getAppiedCfAmt() *-1.0* ( getBoxValueMap().get(EBoxModel.C0) -  1/ Math.pow(1+eir, getCurrTimeFactor()));
	}
}
