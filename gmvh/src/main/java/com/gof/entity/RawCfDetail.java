package com.gof.entity;
// Generated 2020. 1. 16 ���� 3:15:14 by Hibernate Tools 5.1.0.Beta1

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * CfLv1Raw generated by hbm2java
 */
@Entity
@IdClass(RawCfDetailId.class)
@Table(name = "RAW_GOC_CF_DETAIL")
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RawCfDetail implements Serializable {
	private static final long serialVersionUID = -8151467682976876533L;
	
	@Id	private String setlYm;
	@Id	private String exeIdno;
	@Id	private String rsDivId;
	@Id	private String csmGrpCd;
	@Id	private String bemmStcd;
	@Id	private String emmStcd;
	@Id	private String ctrDvcd;
	@Id	private String subKey;
	@Id	private Integer setlAftPassMmcnt;					
	@Id	private Integer cfColSeq;
	@Id	private String cfId;
	
	private String cfType;
	
	@Id	private String cfTiming;
	
	private String outflowYn;
	private Double absCfAmt;
	private Double absPvAmt;
	private String lastModifiedBy;
	private LocalDateTime lastModifiedDate;
	
	@Override
	public boolean equals(Object arg0) {
		return super.equals(arg0);
	}
	@Override
	public int hashCode() {
		return super.hashCode();
	}
	
//	public CfLv1Goc convert(String bssd, MstRunset runset, MstCfLv2 mstCf, int slidingNum) {
//		return CfLv1Goc.builder()
////						.baseYymm(DateUtil.addMonthToString(setlYm, slidingNum))
//						.baseYymm(bssd)
//						.gocId(csmGrpCd)
//						.liabType(ELiabType.LRC)
//						.runsetId(runset.getRunsetId())
////						.runsetType(runset.getRunsetType())
//						.stStatus(bemmStcd)
//						.endStatus(emmStcd)
//						.newContYn(ctrDvcd.equals("2")? EBoolean.Y : EBoolean.N )
//						.cfKeyId(mstCf.getCfId())
//						.cfType(mstCf.getCfType())
//						.cfTiming(mstCf.getCfTiming())
//						.outflowYn(mstCf.getOutflowYn())
//						.cfMonthNum(setlAftPassMmcnt + mstCf.getCfTiming().getAdj() -slidingNum)
//						.setlAftPassMmcnt(setlAftPassMmcnt)
//						.cfAmt(mstCf.getOutflowYn().isTrueFalse()? absCfAmt: absCfAmt*-1.0)
//						.pvAmt(mstCf.getOutflowYn().isTrueFalse()? absPvAmt: absPvAmt*-1.0)
//						.absCfAmt(absCfAmt)
//						.absPvAmt(absPvAmt)
//						.rsDivId(rsDivId)
//						.csmGrpCd(csmGrpCd)
//						.bemmStcd(bemmStcd)
//						.emmStcd(emmStcd)
//						.ctrDvcd(ctrDvcd)
//						.lastModifiedBy("GMV")
//						.lastModifiedDate(LocalDateTime.now())
//						.build();
//	}
	
//	public CfLv1Goc convertAndUpdate(String bssd, MstRunset runset, MstCfLv2 mstCf, int slidingNum, Map<Double, Double> curveMap, List<Integer> groupTenorList) {
//		double cfAmt = mstCf.getOutflowYn().isTrueFalse()? absCfAmt: absCfAmt*-1.0;
//		double pvAmt = mstCf.getOutflowYn().isTrueFalse()? absPvAmt: absPvAmt*-1.0 ;
//		
//		double targetDf = pvAmt / cfAmt;
//		double prevDf =1.0;
//		double currDf =1.0;
//		double cfMonthNum = setlAftPassMmcnt + mstCf.getCfTiming().getAdj() - slidingNum;
//		double tempNum=0.0;
//		
//		if(groupTenorList.contains(setlAftPassMmcnt)) {
//			for(int i=61; i<= 1200; i++) {
//				if(cfTiming.equals(ETiming.MID)) {
//					tempNum = i +0.5;
//				}else {
//					tempNum = (double)i ;
//				}
//				currDf = ECompound.Annualy.getDf(curveMap.getOrDefault(cfMonthNum, 0.0), cfMonthNum/12.0);
//				
//				if(currDf <= targetDf && targetDf < prevDf) {
//					cfMonthNum = tempNum;
//					break;
//				}
//				prevDf = currDf;
//			}
//		}
//		
//		return CfLv1Goc.builder()
////						.baseYymm(DateUtil.addMonthToString(setlYm, slidingNum))
//						.baseYymm(bssd)
//						.gocId(csmGrpCd)
//						.liabType(ELiabType.LRC)
//						.runsetId(runset.getRunsetId())
////						.runsetType(runset.getRunsetType())
//						.stStatus(bemmStcd)
//						.endStatus(emmStcd)
//						.newContYn(ctrDvcd.equals("2")? EBoolean.Y : EBoolean.N )
//						.cfKeyId(mstCf.getCfId())
//						.cfType(mstCf.getCfType())
//						.cfTiming(mstCf.getCfTiming())
//						.outflowYn(mstCf.getOutflowYn())
//						.cfMonthNum(cfMonthNum)
//						.setlAftPassMmcnt(setlAftPassMmcnt)
//						.cfAmt(cfAmt)
//						.pvAmt(pvAmt)
//						.absCfAmt(absCfAmt)
//						.absPvAmt(absPvAmt)
//						.rsDivId(rsDivId)
//						.csmGrpCd(csmGrpCd)
//						.bemmStcd(bemmStcd)
//						.emmStcd(emmStcd)
//						.ctrDvcd(ctrDvcd)
//						.lastModifiedBy("GMV")
//						.lastModifiedDate(LocalDateTime.now())
//						.build();
//	}
	
}
