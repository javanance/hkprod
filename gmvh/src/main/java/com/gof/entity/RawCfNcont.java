package com.gof.entity;
// Generated 2020. 1. 16 ���� 3:15:14 by Hibernate Tools 5.1.0.Beta1

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

import com.gof.enums.EBoolean;
import com.gof.enums.ECfType;
import com.gof.enums.ECompound;
import com.gof.enums.ETiming;
import com.gof.infra.GmvConstant;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * CfLv3Real generated by hbm2java
 */
@Entity
@IdClass(RawCfNcontId.class)
@Table(name = "RAW_CONT_CF")
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
//@Slf4j
public class RawCfNcont implements java.io.Serializable {
	private static final long serialVersionUID = -8151467682976876533L;
	
	@Id	private String setlYm;
	@Id	private String exeIdno;
	@Id	private String rsDivId;
	@Id	private String ctrPolno;
	@Id	private String prodCd;
	@Id	private Integer setlAftPassMmcnt;					
	@Id	private Integer cfColSeq;
	@Id	private String cfId;
	
	@Enumerated(EnumType.STRING)
	@Id	private EBoolean outflowYn;
	
	@Enumerated(EnumType.STRING)
	@Id	private ETiming cfTiming;
	
	@Enumerated(EnumType.STRING)
	private ECfType cfType;
	
	private Double absCfAmt;
	private Double absPvAmt;
	
	private String lastModifiedBy;
	private LocalDateTime lastModifiedDate;

	
	@Override
	public boolean equals(Object arg0) {
		return super.equals(arg0);
	}
	@Override
	public int hashCode() {
		return super.hashCode();
	}
	
	
	@Override
	public String toString() {
		 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(setlYm).append(",")
	 	 	.append(ctrPolno).append(",")
	 	 	.append(cfType).append(",")
	 	 	.append(absCfAmt).append(",")
	 	 	.toString();
	}
	
	public NcontCf convertAndUpdate(String bssd, Map<Double, Double> curveMap, List<Integer> groupTenorList) {
		double cfAmt = outflowYn.isTrueFalse()? absCfAmt: absCfAmt*-1.0;
		double pvAmt = outflowYn.isTrueFalse()? absPvAmt: absPvAmt*-1.0 ;
		
		double targetDf 	= pvAmt / cfAmt;
		double prevDf 		= 1.0;
		double currDf		= 1.0;
		double cfMonthNum 	= setlAftPassMmcnt  + cfTiming.getAdj()  ;
		double tempNum		= 0.0;

//		log.info("aaaa : {},{}", ctrPolno, cfAmt);
		
		if(groupTenorList.contains(setlAftPassMmcnt)) {
			for(int i=61; i<= 1200; i++) {
				if(cfTiming.equals(ETiming.MID)) {
					tempNum = i + 0.5;
				}else {
					tempNum = (double)i ;
				}
				currDf = ECompound.Annualy.getDf(curveMap.getOrDefault(tempNum, 0.0), tempNum/12.0);
				
				if(currDf <= targetDf && targetDf < prevDf) {
					cfMonthNum = tempNum;
					break;
				}
				prevDf = currDf;
			}
		}
		
		double disRate = curveMap.getOrDefault(cfMonthNum, 0.0);
		double df = ECompound.Annualy.getDf(disRate, cfMonthNum/12.0);
		double epvAmt = cfAmt * ECompound.Annualy.getDf(disRate, cfMonthNum/12.0);				
		
		return NcontCf.builder()
				.baseYymm(bssd)
				.ctrPolno(ctrPolno)
				.prodCd(prodCd)
				.cfKeyId(cfId)
				.cfTiming(cfTiming)
				.outflowYn(outflowYn)
				.cfMonthNum(cfMonthNum)
				.cfColSeq(cfColSeq)
				.cfId(cfId)
				.cfType(cfType)
				.setlAftPassMmcnt(setlAftPassMmcnt)
				.cfAmt(cfAmt)
				.pvAmt(pvAmt)
				.epvAmt(epvAmt)
				.absCfAmt(absCfAmt)
				.absPvAmt(absPvAmt)
				.rsDivId(rsDivId)
				.remark(disRate+"_"+df)
				.lastModifiedBy(GmvConstant.getLastModifier())
				.lastModifiedDate(LocalDateTime.now())
				.build();
	}
}
