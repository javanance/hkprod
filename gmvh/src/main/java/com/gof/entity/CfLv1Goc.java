package com.gof.entity;
// Generated 2020. 1. 16 ���� 3:15:14 by Hibernate Tools 5.1.0.Beta1

import java.time.LocalDateTime;
import java.util.Map;
import java.util.function.Function;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.gof.enums.EBoolean;
import com.gof.enums.ECfType;
import com.gof.enums.ECompound;
import com.gof.enums.EContStatus;
import com.gof.enums.ELiabType;
import com.gof.enums.ETiming;
import com.gof.util.DateUtil;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * CfLv2Goc generated by hbm2java
 */
@Entity
@IdClass(CfLv1GocId.class)
@Table(name = "CF_LV1_GOC")
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
//@Slf4j
public class CfLv1Goc implements java.io.Serializable{
	private static final long serialVersionUID = -8151467682976876533L;
	
	@Id	private String baseYymm;
	@Id	private String gocId;
	
	@Enumerated(EnumType.STRING)
	@Id	private ELiabType liabType;

	@Enumerated(EnumType.STRING)
	@Id	private EContStatus stStatus;
	
	@Enumerated(EnumType.STRING)
	@Id	private EContStatus endStatus;
	
	@Enumerated(EnumType.STRING)
	@Id	private EBoolean newContYn;
	
	@Id	private String subKey;
	@Id	private String runsetId;
	
	private String deltaGroup;
	
	@Id	private String cfKeyId;
	
	@Enumerated(EnumType.STRING)
	private ECfType cfType;
	
	@Enumerated(EnumType.STRING)
	@Id	private ETiming cfTiming;
	
	@Enumerated(EnumType.STRING)
	@Id	private EBoolean outflowYn;
	
//	@Id	private Double cfMonthNum;
	private Double cfMonthNum;
	
	@Id private Integer setlAftPassMmcnt;				//Change for update 61st cf !!!! 
	
	
	
	private Double cfAmt;
	private Double pvAmt;
	private Double epvAmt;
	private Double absCfAmt;
	private Double absPvAmt;
	
	private Integer slidingNum;
	
	private String setlYm;
	private String rsDivId;
	private String csmGrpCd;
	private String bemmStcd;
	private String emmStcd;
	private String ctrDvcd;
	
	private String remark;
	private String lastModifiedBy;
	private LocalDateTime lastModifiedDate;
	
	@Override
	public boolean equals(Object arg0) {
		return super.equals(arg0);
	}
	@Override
	public int hashCode() {
		return super.hashCode();
	}
	@Override
	public String toString() {
		 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(liabType).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
	 	 	.append(newContYn).append(",")
	 	 	.append(rsDivId).append(",")
	 	 	.append(runsetId).append(",")
	 	 	.append(subKey).append(",")
	 	 	.append(cfKeyId).append(",")
	 	 	.append(cfTiming).append(",")
	 	 	.append(cfMonthNum).append(",")
	 	 	.append(setlAftPassMmcnt).append(",")
	 	 	.append(outflowYn).append(",")
	 	 	.append(cfAmt).append(",")
	 	 	.append(pvAmt).append(",")
	 	 	.toString();
	}
	
	
//	*************************************************
	public String getDfLv3Pk() {
		return gocId+cfMonthNum;
	}
	
	public String getPkForEir() {
		 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(liabType).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
//	 	 	.append(newContYn).append(",")
	 	 	.toString(); 
	}
	
//	private String getPkForRst() {
//		 StringBuilder 	builder = new StringBuilder();
//	 	 return builder
//	 		.append(baseYymm).append(",")
//	 	 	.append(gocId).append(",")
//	 	 	.append(liabType).append(",")
//	 	 	.append(stStatus).append(",")
//	 	 	.append(endStatus).append(",")
//	 	 	.append(newContYn).append(",")
//	 	 	.toString(); 
//	}
	
	public String getDeltaCashFlowPk(){ 
	 	 StringBuilder 	builder = new StringBuilder();
	 	 return builder
	 		.append(baseYymm).append(",")
	 	 	.append(gocId).append(",")
	 	 	.append(liabType).append(",")
	 	 	.append(stStatus).append(",")
	 	 	.append(endStatus).append(",")
//	 	 	.append(newContYn).append(",")
	 	 	.append(subKey).append(",")
	 	 	.append(cfKeyId).append(",")
	 	 	.append(cfTiming).append(",")
	 	 	.append(cfMonthNum).append(",")
	 	 	.append(outflowYn).append(",")
	 	 	.toString(); 
	}
	
	
	public double getEpvWithFn(Map<Double, Double> currMap, Function<CfLv1Goc, Double> tenorAdjFn) {
		double tenor 	= tenorAdjFn.apply(this);
		double currRate = currMap.getOrDefault(tenor, 0.0);
		return getEpv(currRate, tenor/12.0);
	}
	
	
	public double getEirAplyEpv(Map<String, Double> currSysMap) {
		double currRate = currSysMap.getOrDefault(gocId, 0.0);									// 직전 EIR
		return getEpv(currRate, cfMonthNum / 12.0);
	}
	
	public double getEirAplyEpv(Map<String, Double> currSysMap,  Function<CfLv1Goc, Double> tenorAdjFn) {
		double tenor = tenorAdjFn.apply(this);
		double currRate = currSysMap.getOrDefault(gocId, 0.0);									// 직전 EIR
		return getEpv(currRate, tenor/12.0);
	}
	
	private double getEpv(double intRate, double timeFactor) {
		double df = ECompound.Annualy.getDf(intRate, timeFactor);
//		log.info("Rate {} : {},{},{},{},{}", getPkForEir(), intRate, df, cfAmt, cfMonthNum, cfAmt*df);
		return cfAmt * df;
	}
	
	public boolean isFutureCf(double forwardingNum) {
		if(cfTiming.equals(ETiming.START)) {
			return cfMonthNum >= forwardingNum;
		}
		else {
			return cfMonthNum > forwardingNum ;
		}
//		return cfTiming.equals(ETiming.START)? cfMonthNum >= forwardingNum: cfMonthNum > forwardingNum; 
	}
	
	
	
	public double getGenCfMonthNumForEir() {
//		if(setlAftPassMmcnt==61 && outflowYn.isTrueFalse()) {
//			return cfMonthNum + slidingNum - 1.0; 
//		}else {
//			return cfMonthNum + slidingNum; 
//		}
		return cfMonthNum + slidingNum; 
	}
	
	public double getGenCfMonthNum() {
		return cfMonthNum + slidingNum; 
	}
	
	public String getGenYymm() {
		return DateUtil.addMonthToString(baseYymm, -1 * slidingNum);
		
	}
}
